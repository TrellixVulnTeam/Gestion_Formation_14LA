import { __decorate, __metadata, __param } from 'tslib';
import { InjectionToken, Optional, Host, SkipSelf, Inject, Input, HostBinding, Directive, EventEmitter, Output, HostListener, Component, ɵɵdefineInjectable, ɵɵinject, Injectable, ElementRef, ContentChildren, QueryList, ContentChild, NgModule } from '@angular/core';
import { ControlContainer, FormGroup, FormArray, FormControl, FormControlName } from '@angular/forms';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';

function MessagesComponent_span_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const message_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r0.className);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(message_r1);
} }
const _c0 = ["class", "form-group"];
function FormGroupComponent_bfv_messages_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "bfv-messages", 1);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("messages", ctx_r0.messages);
} }
const _c1 = ["*"];
var BootstrapVersion;
(function (BootstrapVersion) {
    BootstrapVersion[BootstrapVersion["Three"] = 0] = "Three";
    BootstrapVersion[BootstrapVersion["Four"] = 1] = "Four";
})(BootstrapVersion || (BootstrapVersion = {}));

const CUSTOM_ERROR_MESSAGES = new InjectionToken("ng-bootstrap-form-validation custom error messages");
const BOOTSTRAP_VERSION = new InjectionToken("ng-bootstrap-form-validation module options");

function controlPath(name, parent) {
    // tslint:disable-next-line:no-non-null-assertion
    return [...parent.path, name];
}
let FormControlDirective = class FormControlDirective {
    constructor(
    // this value might be null, but we union type it as such until
    // this issue is resolved: https://github.com/angular/angular/issues/25544
    parent, bootstrapVersion) {
        this.parent = parent;
        this.bootstrapVersion = bootstrapVersion;
    }
    get validClass() {
        if (!this.control) {
            return false;
        }
        return (this.bootstrapFour &&
            this.control.valid &&
            (this.control.touched || this.control.dirty));
    }
    get invalidClass() {
        if (!this.control) {
            return false;
        }
        return (this.bootstrapFour &&
            this.control.invalid &&
            this.control.touched &&
            this.control.dirty);
    }
    get path() {
        return controlPath(this.formControlName, this.parent);
    }
    get control() {
        return this.formDirective && this.formDirective.getControl(this);
    }
    get formDirective() {
        return this.parent ? this.parent.formDirective : null;
    }
    get bootstrapFour() {
        return this.bootstrapVersion === BootstrapVersion.Four;
    }
};
FormControlDirective.ɵfac = function FormControlDirective_Factory(t) { return new (t || FormControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer, 13), ɵngcc0.ɵɵdirectiveInject(BOOTSTRAP_VERSION)); };
FormControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormControlDirective, selectors: [["", 8, "form-control"], ["", 8, "form-check-input"], ["", 8, "custom-control-input"]], hostVars: 4, hostBindings: function FormControlDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-valid", ctx.validClass)("is-invalid", ctx.invalidClass);
    } }, inputs: { formControlName: "formControlName", formControl: "formControl" } });
FormControlDirective.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },
    { type: undefined, decorators: [{ type: Inject, args: [BOOTSTRAP_VERSION,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], FormControlDirective.prototype, "formControlName", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FormControlDirective.prototype, "formControl", void 0);
__decorate([
    HostBinding("class.is-valid"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormControlDirective.prototype, "validClass", null);
__decorate([
    HostBinding("class.is-invalid"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormControlDirective.prototype, "invalidClass", null);
FormControlDirective = __decorate([ __param(0, Optional()),
    __param(0, Host()),
    __param(0, SkipSelf()),
    __param(1, Inject(BOOTSTRAP_VERSION)),
    __metadata("design:paramtypes", [ControlContainer, Number])
], FormControlDirective);

let FormValidationDirective = class FormValidationDirective {
    constructor() {
        this.validSubmit = new EventEmitter();
    }
    onSubmit() {
        this.markAsTouchedAndDirty(this.formGroup);
        if (this.formGroup.valid) {
            this.validSubmit.emit(this.formGroup.value);
        }
    }
    markAsTouchedAndDirty(control) {
        if (control instanceof FormGroup) {
            Object.keys(control.controls).forEach(key => this.markAsTouchedAndDirty(control.controls[key]));
        }
        else if (control instanceof FormArray) {
            control.controls.forEach(c => this.markAsTouchedAndDirty(c));
        }
        else if (control instanceof FormControl && control.enabled) {
            control.markAsDirty();
            control.markAsTouched();
            control.updateValueAndValidity();
        }
    }
};
FormValidationDirective.ɵfac = function FormValidationDirective_Factory(t) { return new (t || FormValidationDirective)(); };
FormValidationDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormValidationDirective, selectors: [["", "formGroup", ""]], hostBindings: function FormValidationDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("submit", function FormValidationDirective_submit_HostBindingHandler() { return ctx.onSubmit(); });
    } }, inputs: { formGroup: "formGroup" }, outputs: { validSubmit: "validSubmit" } });
__decorate([
    Input(),
    __metadata("design:type", FormGroup)
], FormValidationDirective.prototype, "formGroup", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FormValidationDirective.prototype, "validSubmit", void 0);
__decorate([
    HostListener("submit"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FormValidationDirective.prototype, "onSubmit", null);

let MessagesComponent = class MessagesComponent {
    constructor(bootstrapVersion) {
        this.bootstrapVersion = bootstrapVersion;
        this.messages = () => [];
    }
    get className() {
        switch (this.bootstrapVersion) {
            case BootstrapVersion.Three:
                return "help-block";
            case BootstrapVersion.Four:
                return "invalid-feedback";
        }
    }
};
MessagesComponent.ɵfac = function MessagesComponent_Factory(t) { return new (t || MessagesComponent)(ɵngcc0.ɵɵdirectiveInject(BOOTSTRAP_VERSION)); };
MessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MessagesComponent, selectors: [["bfv-messages"]], inputs: { messages: "messages" }, decls: 1, vars: 1, consts: [[3, "ngClass", 4, "ngFor", "ngForOf"], [3, "ngClass"]], template: function MessagesComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, MessagesComponent_span_0_Template, 2, 2, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.messages());
    } }, directives: [ɵngcc2.NgForOf, ɵngcc2.NgClass], styles: [".invalid-feedback[_ngcontent-%COMP%], .valid-feedback[_ngcontent-%COMP%] {\n        display: block;\n      }"] });
MessagesComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [BOOTSTRAP_VERSION,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], MessagesComponent.prototype, "messages", void 0);
MessagesComponent = __decorate([ __param(0, Inject(BOOTSTRAP_VERSION)),
    __metadata("design:paramtypes", [Number])
], MessagesComponent);

const ɵ0 = label => `${label} is required`, ɵ1 = label => `${label} is invalid`, ɵ2 = (label, error) => `${label} must be at least ${error.requiredLength} characters`, ɵ3 = (label, error) => `${label} must be no longer than ${error.requiredLength} characters`, ɵ4 = (label, error) => `${label} is required`, ɵ5 = (label, error) => `Invalid email address`, ɵ6 = (label, error) => `${label} must be no greater than ${error.max}`, ɵ7 = (label, error) => `${label} must be no less than ${error.min}`;
const DEFAULT_ERRORS = [
    {
        error: "required",
        format: ɵ0
    },
    {
        error: "pattern",
        format: ɵ1
    },
    {
        error: "minlength",
        format: ɵ2
    },
    {
        error: "maxlength",
        format: ɵ3
    },
    {
        error: "requiredTrue",
        format: ɵ4
    },
    {
        error: "email",
        format: ɵ5
    },
    {
        error: "max",
        format: ɵ6
    },
    {
        error: "min",
        format: ɵ7
    }
];

let ErrorMessageService = class ErrorMessageService {
    constructor(customErrorMessages) {
        this.customErrorMessages = customErrorMessages;
        this.defaultErrors = DEFAULT_ERRORS;
        this.errorMessages = customErrorMessages.reduce((acc, cur) => acc.concat(cur), this.defaultErrors);
    }
};
ErrorMessageService.ɵfac = function ErrorMessageService_Factory(t) { return new (t || ErrorMessageService)(ɵngcc0.ɵɵinject(CUSTOM_ERROR_MESSAGES)); };
ErrorMessageService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [CUSTOM_ERROR_MESSAGES,] }] }
];
ErrorMessageService.ɵprov = ɵɵdefineInjectable({ factory: function ErrorMessageService_Factory() { return new ErrorMessageService(ɵɵinject(CUSTOM_ERROR_MESSAGES)); }, token: ErrorMessageService, providedIn: "root" });
ErrorMessageService = __decorate([ __param(0, Inject(CUSTOM_ERROR_MESSAGES)),
    __metadata("design:paramtypes", [Array])
], ErrorMessageService);

let FormGroupComponent = class FormGroupComponent {
    constructor(elRef, errorMessageService) {
        this.elRef = elRef;
        this.errorMessageService = errorMessageService;
        this.customErrorMessages = [];
        this.validationDisabled = false;
        this.messages = () => this.getMessages();
    }
    get hasErrors() {
        return (this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&
            !this.validationDisabled);
    }
    get hasSuccess() {
        return (!this.FormControlNames.some(c => !c.valid) &&
            this.FormControlNames.some(c => c.dirty && c.touched) &&
            !this.validationDisabled);
    }
    ngAfterContentInit() {
        if (this.messagesBlock) {
            this.messagesBlock.messages = this.messages;
        }
    }
    ngOnInit() {
        this.errorMessages = this.errorMessageService.errorMessages
            .concat(this.customErrorMessages)
            .reverse();
    }
    get label() {
        const label = this.elRef.nativeElement.querySelector("label");
        return label && label.textContent ? label.textContent.trim() : "This field";
    }
    get isDirtyAndTouched() {
        return this.FormControlNames.some(c => c.dirty && c.touched);
    }
    getMessages() {
        const messages = [];
        if (!this.isDirtyAndTouched || this.validationDisabled) {
            return messages;
        }
        const names = this.FormControlNames.map(f => f.name);
        this.FormControlNames.filter((c, i) => !c.valid &&
            !!c.errors &&
            // filter out FormControlNames that share the same name - usually for radio buttons
            names.indexOf(c.name) === i).forEach(control => {
            Object.keys(control.errors).forEach(key => {
                const error = this.errorMessages.find(err => err.error === key);
                if (!error) {
                    return;
                }
                messages.push(error.format(this.label, control.errors[key]));
            });
        });
        return messages;
    }
};
FormGroupComponent.ɵfac = function FormGroupComponent_Factory(t) { return new (t || FormGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ErrorMessageService)); };
FormGroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormGroupComponent, selectors: [["", 8, "form-group"]], contentQueries: function FormGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, MessagesComponent, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FormControlName, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.messagesBlock = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.FormControlNames = _t);
    } }, hostVars: 4, hostBindings: function FormGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-error", ctx.hasErrors)("has-success", ctx.hasSuccess);
    } }, inputs: { customErrorMessages: "customErrorMessages", validationDisabled: "validationDisabled" }, attrs: _c0, ngContentSelectors: _c1, decls: 2, vars: 1, consts: [[3, "messages", 4, "ngIf"], [3, "messages"]], template: function FormGroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, FormGroupComponent_bfv_messages_1_Template, 1, 1, "bfv-messages", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.messagesBlock);
    } }, directives: [ɵngcc2.NgIf, MessagesComponent], encapsulation: 2 });
FormGroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ErrorMessageService }
];
__decorate([
    ContentChildren(FormControlName, { descendants: true }),
    __metadata("design:type", QueryList)
], FormGroupComponent.prototype, "FormControlNames", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FormGroupComponent.prototype, "customErrorMessages", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FormGroupComponent.prototype, "validationDisabled", void 0);
__decorate([
    HostBinding("class.has-error"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormGroupComponent.prototype, "hasErrors", null);
__decorate([
    HostBinding("class.has-success"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormGroupComponent.prototype, "hasSuccess", null);
__decorate([
    ContentChild(MessagesComponent),
    __metadata("design:type", MessagesComponent)
], FormGroupComponent.prototype, "messagesBlock", void 0);
FormGroupComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        ErrorMessageService])
], FormGroupComponent);

var NgBootstrapFormValidationModule_1;
let NgBootstrapFormValidationModule = NgBootstrapFormValidationModule_1 = class NgBootstrapFormValidationModule {
    static forRoot(userOptions = {
        bootstrapVersion: BootstrapVersion.Four
    }) {
        return {
            ngModule: NgBootstrapFormValidationModule_1,
            providers: [
                {
                    provide: CUSTOM_ERROR_MESSAGES,
                    useValue: userOptions.customErrorMessages || [],
                    multi: true
                },
                {
                    provide: BOOTSTRAP_VERSION,
                    useValue: userOptions.bootstrapVersion
                },
                ErrorMessageService
            ]
        };
    }
};
NgBootstrapFormValidationModule.ɵfac = function NgBootstrapFormValidationModule_Factory(t) { return new (t || NgBootstrapFormValidationModule)(); };
NgBootstrapFormValidationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgBootstrapFormValidationModule });
NgBootstrapFormValidationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormControlDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: ".form-control,.form-check-input,.custom-control-input"
            }]
    }], function () { return [{ type: ɵngcc1.ControlContainer, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: SkipSelf
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [BOOTSTRAP_VERSION]
            }] }]; }, { validClass: [{
            type: HostBinding,
            args: ["class.is-valid"]
        }], invalidClass: [{
            type: HostBinding,
            args: ["class.is-invalid"]
        }], formControlName: [{
            type: Input
        }], formControl: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormValidationDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: "[formGroup]"
            }]
    }], function () { return []; }, { validSubmit: [{
            type: Output
        }], onSubmit: [{
            type: HostListener,
            args: ["submit"]
        }], formGroup: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MessagesComponent, [{
        type: Component,
        args: [{
                selector: "bfv-messages",
                template: `
    <span [ngClass]="className" *ngFor="let message of messages()">{{message}}</span>
  `,
                styles: [`
      .invalid-feedback,
      .valid-feedback {
        display: block;
      }
    `]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [BOOTSTRAP_VERSION]
            }] }]; }, { messages: [{
            type: Input
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorMessageService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return [{ type: Array, decorators: [{
                type: Inject,
                args: [CUSTOM_ERROR_MESSAGES]
            }] }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormGroupComponent, [{
        type: Component,
        args: [{
                // tslint:disable:component-selector
                selector: ".form-group",
                template: `
    <ng-content></ng-content>
    <bfv-messages *ngIf="!messagesBlock" [messages]="messages"></bfv-messages>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ErrorMessageService }]; }, { customErrorMessages: [{
            type: Input
        }], validationDisabled: [{
            type: Input
        }], hasErrors: [{
            type: HostBinding,
            args: ["class.has-error"]
        }], hasSuccess: [{
            type: HostBinding,
            args: ["class.has-success"]
        }], FormControlNames: [{
            type: ContentChildren,
            args: [FormControlName, { descendants: true }]
        }], messagesBlock: [{
            type: ContentChild,
            args: [MessagesComponent]
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgBootstrapFormValidationModule, { declarations: function () { return [FormValidationDirective, FormGroupComponent, MessagesComponent, FormControlDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [FormValidationDirective, FormGroupComponent, MessagesComponent, FormControlDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgBootstrapFormValidationModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    FormValidationDirective,
                    FormGroupComponent,
                    MessagesComponent,
                    FormControlDirective
                ],
                exports: [
                    FormValidationDirective,
                    FormGroupComponent,
                    MessagesComponent,
                    FormControlDirective
                ]
            }]
    }], null, null); })();

/*
 * Public API Surface of ng-bootstrap-form-validation
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BOOTSTRAP_VERSION, BootstrapVersion, CUSTOM_ERROR_MESSAGES, FormControlDirective, FormGroupComponent, FormValidationDirective, MessagesComponent, NgBootstrapFormValidationModule, ErrorMessageService as ɵa };

//# sourceMappingURL=ng-bootstrap-form-validation.js.map