{"version":3,"file":"ng-bootstrap-form-validation.js","sources":["ng://ng-bootstrap-form-validation/lib/Enums/BootstrapVersion.ts","ng://ng-bootstrap-form-validation/lib/Tokens/tokens.ts","ng://ng-bootstrap-form-validation/lib/Directives/form-control.directive.ts","ng://ng-bootstrap-form-validation/lib/Directives/form-validation.directive.ts","ng://ng-bootstrap-form-validation/lib/Components/messages/messages.component.ts","ng://ng-bootstrap-form-validation/lib/default-errors.ts","ng://ng-bootstrap-form-validation/lib/Services/error-message.service.ts","ng://ng-bootstrap-form-validation/lib/Components/form-group/form-group.component.ts","ng://ng-bootstrap-form-validation/lib/ng-bootstrap-form-validation.module.ts","ng://ng-bootstrap-form-validation/public_api.ts","ng://ng-bootstrap-form-validation/ng-bootstrap-form-validation.ts"],"sourcesContent":["export enum BootstrapVersion {\n  Three,\n  Four\n}\n","import { InjectionToken } from \"@angular/core\";\nimport { BootstrapVersion } from \"../Enums/BootstrapVersion\";\nimport { ErrorMessage } from \"../Models/error-message\";\n\nexport const CUSTOM_ERROR_MESSAGES = new InjectionToken<ErrorMessage[]>(\n  \"ng-bootstrap-form-validation custom error messages\"\n);\n\nexport const BOOTSTRAP_VERSION = new InjectionToken<BootstrapVersion>(\n  \"ng-bootstrap-form-validation module options\"\n);\n","import {\n  Directive,\n  Input,\n  HostBinding,\n  Optional,\n  Host,\n  SkipSelf,\n  Inject\n} from \"@angular/core\";\nimport { ControlContainer, FormControl } from \"@angular/forms\";\nimport { BootstrapVersion } from \"../Enums/BootstrapVersion\";\nimport { BOOTSTRAP_VERSION } from \"../Tokens/tokens\";\n\nexport function controlPath(name: string, parent: ControlContainer): string[] {\n  // tslint:disable-next-line:no-non-null-assertion\n  return [...parent.path!, name];\n}\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: \".form-control,.form-check-input,.custom-control-input\"\n})\nexport class FormControlDirective {\n  @Input()\n  formControlName: string;\n  @Input()\n  formControl: string;\n\n  @HostBinding(\"class.is-valid\")\n  get validClass() {\n    if (!this.control) {\n      return false;\n    }\n    return (\n      this.bootstrapFour &&\n      this.control.valid &&\n      (this.control.touched || this.control.dirty)\n    );\n  }\n\n  @HostBinding(\"class.is-invalid\")\n  get invalidClass() {\n    if (!this.control) {\n      return false;\n    }\n    return (\n      this.bootstrapFour &&\n      this.control.invalid &&\n      this.control.touched &&\n      this.control.dirty\n    );\n  }\n\n  get path() {\n    return controlPath(this.formControlName, this.parent);\n  }\n\n  get control(): FormControl {\n    return this.formDirective && this.formDirective.getControl(this);\n  }\n\n  get formDirective(): any {\n    return this.parent ? this.parent.formDirective : null;\n  }\n\n  get bootstrapFour() {\n    return this.bootstrapVersion === BootstrapVersion.Four;\n  }\n\n  constructor(\n    // this value might be null, but we union type it as such until\n    // this issue is resolved: https://github.com/angular/angular/issues/25544\n    @Optional()\n    @Host()\n    @SkipSelf()\n    private parent: ControlContainer,\n    @Inject(BOOTSTRAP_VERSION) private bootstrapVersion: BootstrapVersion\n  ) {}\n}\n","import {\n  Directive,\n  EventEmitter,\n  Input,\n  Output,\n  HostListener\n} from \"@angular/core\";\nimport {\n  AbstractControl,\n  FormArray,\n  FormControl,\n  FormGroup\n} from \"@angular/forms\";\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: \"[formGroup]\"\n})\nexport class FormValidationDirective {\n  @Input()\n  formGroup: FormGroup;\n  @Output()\n  validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(control: AbstractControl) {\n    if (control instanceof FormGroup) {\n      Object.keys(control.controls).forEach(key =>\n        this.markAsTouchedAndDirty(control.controls[key])\n      );\n    } else if (control instanceof FormArray) {\n      control.controls.forEach(c => this.markAsTouchedAndDirty(c));\n    } else if (control instanceof FormControl && control.enabled) {\n      control.markAsDirty();\n      control.markAsTouched();\n      control.updateValueAndValidity();\n    }\n  }\n}\n","import { Component, Input, Inject } from \"@angular/core\";\nimport { BootstrapVersion } from \"../../../lib/Enums/BootstrapVersion\";\nimport { BOOTSTRAP_VERSION } from \"../../Tokens/tokens\";\n\n@Component({\n  selector: \"bfv-messages\",\n  template: `\n    <span [ngClass]=\"className\" *ngFor=\"let message of messages()\">{{message}}</span>\n  `,\n  styles: [\n    `\n      .invalid-feedback,\n      .valid-feedback {\n        display: block;\n      }\n    `\n  ]\n})\nexport class MessagesComponent {\n  @Input()\n  public messages = () => [];\n\n  get className() {\n    switch (this.bootstrapVersion) {\n      case BootstrapVersion.Three:\n        return \"help-block\";\n      case BootstrapVersion.Four:\n        return \"invalid-feedback\";\n    }\n  }\n\n  constructor(\n    @Inject(BOOTSTRAP_VERSION) private bootstrapVersion: BootstrapVersion\n  ) {}\n}\n","import { ErrorMessage } from \"./Models/error-message\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n","import { Injectable, Inject } from \"@angular/core\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\nimport { ErrorMessage } from \"../Models/error-message\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  public errorMessages: ErrorMessage[];\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES) public customErrorMessages: ErrorMessage[][]\n  ) {\n    this.errorMessages = customErrorMessages.reduce(\n      (acc, cur) => acc.concat(cur),\n      this.defaultErrors\n    );\n  }\n}\n","import {\n  Component,\n  ContentChildren,\n  ContentChild,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  OnInit,\n  AfterContentInit\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\nimport { MessagesComponent } from \"../messages/messages.component\";\nimport { ErrorMessage } from \"../../Models/error-message\";\n\n@Component({\n  // tslint:disable:component-selector\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  `\n})\nexport class FormGroupComponent implements OnInit, AfterContentInit {\n  @ContentChildren(FormControlName, {descendants: true})\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input()\n  customErrorMessages: ErrorMessage[] = [];\n\n  @Input()\n  validationDisabled = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @ContentChild(MessagesComponent)\n  public messagesBlock: MessagesComponent;\n\n  private errorMessages: ErrorMessage[];\n\n  public messages = () => this.getMessages();\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {}\n\n  ngAfterContentInit() {\n    if (this.messagesBlock) {\n      this.messagesBlock.messages = this.messages;\n    }\n  }\n\n  ngOnInit() {\n    this.errorMessages = this.errorMessageService.errorMessages\n      .concat(this.customErrorMessages)\n      .reverse();\n  }\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  private getMessages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) {\n      return messages;\n    }\n\n    const names = this.FormControlNames.map(f => f.name);\n\n    this.FormControlNames.filter(\n      (c, i) =>\n        !c.valid &&\n        !!c.errors &&\n        // filter out FormControlNames that share the same name - usually for radio buttons\n        names.indexOf(c.name) === i\n    ).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(err => err.error === key);\n        if (!error) {\n          return;\n        }\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n\n    return messages;\n  }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { MessagesComponent } from \"./Components/messages/messages.component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { CUSTOM_ERROR_MESSAGES, BOOTSTRAP_VERSION } from \"./Tokens/tokens\";\nimport { BootstrapVersion } from \"./Enums/BootstrapVersion\";\nimport { FormGroupComponent } from \"./Components/form-group/form-group.component\";\nimport { NgBootstrapFormValidationModuleOptions } from \"./Models/NgBootstrapFormValidationModuleOptions\";\nimport { FormControlDirective } from \"./Directives/form-control.directive\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent,\n    FormControlDirective\n  ],\n  exports: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent,\n    FormControlDirective\n  ]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(\n    userOptions: NgBootstrapFormValidationModuleOptions = {\n      bootstrapVersion: BootstrapVersion.Four\n    }\n  ): ModuleWithProviders<NgBootstrapFormValidationModule> {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: userOptions.customErrorMessages || [],\n          multi: true\n        },\n        {\n          provide: BOOTSTRAP_VERSION,\n          useValue: userOptions.bootstrapVersion\n        },\n        ErrorMessageService\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ng-bootstrap-form-validation\n */\n\nexport { ErrorMessage, FormatErrorFunction } from \"./lib/Models/error-message\";\nexport { FormControlDirective } from \"./lib/Directives/form-control.directive\";\nexport {\n  FormValidationDirective\n} from \"./lib/Directives/form-validation.directive\";\nexport {\n  MessagesComponent\n} from \"./lib/Components/messages/messages.component\";\nexport {\n  FormGroupComponent\n} from \"./lib/Components/form-group/form-group.component\";\nexport { BootstrapVersion } from \"./lib/Enums/BootstrapVersion\";\nexport * from \"./lib/Tokens/tokens\";\nexport {\n  NgBootstrapFormValidationModule\n} from \"./lib/ng-bootstrap-form-validation.module\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {ErrorMessageService as Éµa} from './lib/Services/error-message.service';"],"names":[],"mappings":"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"}