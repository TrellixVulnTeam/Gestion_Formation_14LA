import { __decorate, __metadata } from "tslib";
import { Component, ContentChildren, ContentChild, ElementRef, HostBinding, Input, QueryList, OnInit, AfterContentInit } from "@angular/core";
import { FormControlName } from "@angular/forms";
import { ErrorMessageService } from "../../Services/error-message.service";
import { MessagesComponent } from "../messages/messages.component";
var FormGroupComponent = /** @class */ (function () {
    function FormGroupComponent(elRef, errorMessageService) {
        var _this = this;
        this.elRef = elRef;
        this.errorMessageService = errorMessageService;
        this.customErrorMessages = [];
        this.validationDisabled = false;
        this.messages = function () { return _this.getMessages(); };
    }
    Object.defineProperty(FormGroupComponent.prototype, "hasErrors", {
        get: function () {
            return (this.FormControlNames.some(function (c) { return !c.valid && c.dirty && c.touched; }) &&
                !this.validationDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "hasSuccess", {
        get: function () {
            return (!this.FormControlNames.some(function (c) { return !c.valid; }) &&
                this.FormControlNames.some(function (c) { return c.dirty && c.touched; }) &&
                !this.validationDisabled);
        },
        enumerable: true,
        configurable: true
    });
    FormGroupComponent.prototype.ngAfterContentInit = function () {
        if (this.messagesBlock) {
            this.messagesBlock.messages = this.messages;
        }
    };
    FormGroupComponent.prototype.ngOnInit = function () {
        this.errorMessages = this.errorMessageService.errorMessages
            .concat(this.customErrorMessages)
            .reverse();
    };
    Object.defineProperty(FormGroupComponent.prototype, "label", {
        get: function () {
            var label = this.elRef.nativeElement.querySelector("label");
            return label && label.textContent ? label.textContent.trim() : "This field";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "isDirtyAndTouched", {
        get: function () {
            return this.FormControlNames.some(function (c) { return c.dirty && c.touched; });
        },
        enumerable: true,
        configurable: true
    });
    FormGroupComponent.prototype.getMessages = function () {
        var _this = this;
        var messages = [];
        if (!this.isDirtyAndTouched || this.validationDisabled) {
            return messages;
        }
        var names = this.FormControlNames.map(function (f) { return f.name; });
        this.FormControlNames.filter(function (c, i) {
            return !c.valid &&
                !!c.errors &&
                // filter out FormControlNames that share the same name - usually for radio buttons
                names.indexOf(c.name) === i;
        }).forEach(function (control) {
            Object.keys(control.errors).forEach(function (key) {
                var error = _this.errorMessages.find(function (err) { return err.error === key; });
                if (!error) {
                    return;
                }
                messages.push(error.format(_this.label, control.errors[key]));
            });
        });
        return messages;
    };
    FormGroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ErrorMessageService }
    ]; };
    __decorate([
        ContentChildren(FormControlName, { descendants: true }),
        __metadata("design:type", QueryList)
    ], FormGroupComponent.prototype, "FormControlNames", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], FormGroupComponent.prototype, "customErrorMessages", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FormGroupComponent.prototype, "validationDisabled", void 0);
    __decorate([
        HostBinding("class.has-error"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], FormGroupComponent.prototype, "hasErrors", null);
    __decorate([
        HostBinding("class.has-success"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], FormGroupComponent.prototype, "hasSuccess", null);
    __decorate([
        ContentChild(MessagesComponent),
        __metadata("design:type", MessagesComponent)
    ], FormGroupComponent.prototype, "messagesBlock", void 0);
    FormGroupComponent = __decorate([
        Component({
            // tslint:disable:component-selector
            selector: ".form-group",
            template: "\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  "
        }),
        __metadata("design:paramtypes", [ElementRef,
            ErrorMessageService])
    ], FormGroupComponent);
    return FormGroupComponent;
}());
export { FormGroupComponent };
//# sourceMappingURL=data:application/json;base64,