import { __decorate, __metadata } from "tslib";
import { Component, ContentChildren, ContentChild, ElementRef, HostBinding, Input, QueryList, OnInit, AfterContentInit } from "@angular/core";
import { FormControlName } from "@angular/forms";
import { ErrorMessageService } from "../../Services/error-message.service";
import { MessagesComponent } from "../messages/messages.component";
let FormGroupComponent = class FormGroupComponent {
    constructor(elRef, errorMessageService) {
        this.elRef = elRef;
        this.errorMessageService = errorMessageService;
        this.customErrorMessages = [];
        this.validationDisabled = false;
        this.messages = () => this.getMessages();
    }
    get hasErrors() {
        return (this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&
            !this.validationDisabled);
    }
    get hasSuccess() {
        return (!this.FormControlNames.some(c => !c.valid) &&
            this.FormControlNames.some(c => c.dirty && c.touched) &&
            !this.validationDisabled);
    }
    ngAfterContentInit() {
        if (this.messagesBlock) {
            this.messagesBlock.messages = this.messages;
        }
    }
    ngOnInit() {
        this.errorMessages = this.errorMessageService.errorMessages
            .concat(this.customErrorMessages)
            .reverse();
    }
    get label() {
        const label = this.elRef.nativeElement.querySelector("label");
        return label && label.textContent ? label.textContent.trim() : "This field";
    }
    get isDirtyAndTouched() {
        return this.FormControlNames.some(c => c.dirty && c.touched);
    }
    getMessages() {
        const messages = [];
        if (!this.isDirtyAndTouched || this.validationDisabled) {
            return messages;
        }
        const names = this.FormControlNames.map(f => f.name);
        this.FormControlNames.filter((c, i) => !c.valid &&
            !!c.errors &&
            // filter out FormControlNames that share the same name - usually for radio buttons
            names.indexOf(c.name) === i).forEach(control => {
            Object.keys(control.errors).forEach(key => {
                const error = this.errorMessages.find(err => err.error === key);
                if (!error) {
                    return;
                }
                messages.push(error.format(this.label, control.errors[key]));
            });
        });
        return messages;
    }
};
FormGroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ErrorMessageService }
];
__decorate([
    ContentChildren(FormControlName, { descendants: true }),
    __metadata("design:type", QueryList)
], FormGroupComponent.prototype, "FormControlNames", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], FormGroupComponent.prototype, "customErrorMessages", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FormGroupComponent.prototype, "validationDisabled", void 0);
__decorate([
    HostBinding("class.has-error"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormGroupComponent.prototype, "hasErrors", null);
__decorate([
    HostBinding("class.has-success"),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], FormGroupComponent.prototype, "hasSuccess", null);
__decorate([
    ContentChild(MessagesComponent),
    __metadata("design:type", MessagesComponent)
], FormGroupComponent.prototype, "messagesBlock", void 0);
FormGroupComponent = __decorate([
    Component({
        // tslint:disable:component-selector
        selector: ".form-group",
        template: `
    <ng-content></ng-content>
    <bfv-messages *ngIf="!messagesBlock" [messages]="messages"></bfv-messages>
  `
    }),
    __metadata("design:paramtypes", [ElementRef,
        ErrorMessageService])
], FormGroupComponent);
export { FormGroupComponent };
//# sourceMappingURL=data:application/json;base64,